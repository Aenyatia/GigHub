// <auto-generated />

using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using System;

namespace GigHub.Infrastructure.Persistence.Data.Migrations
{
	[DbContext(typeof(ApplicationContext))]
	partial class ApplicationContextModelSnapshot : ModelSnapshot
	{
		protected override void BuildModel(ModelBuilder modelBuilder)
		{
#pragma warning disable 612, 618
			modelBuilder
				.HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
				.HasAnnotation("Relational:MaxIdentifierLength", 128)
				.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

			modelBuilder.Entity("ConcertHub.Core.Domain.Attendance", b =>
				{
					b.Property<int>("GigId");

					b.Property<string>("AttendeeId");

					b.HasKey("GigId", "AttendeeId");

					b.HasIndex("AttendeeId");

					b.ToTable("Attendances");
				});

			modelBuilder.Entity("ConcertHub.Core.Domain.Following", b =>
				{
					b.Property<string>("FollowerId");

					b.Property<string>("FolloweeId");

					b.HasKey("FollowerId", "FolloweeId");

					b.HasIndex("FolloweeId");

					b.ToTable("Followings");
				});

			modelBuilder.Entity("ConcertHub.Core.Domain.Genre", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("Name")
						.IsRequired();

					b.HasKey("Id");

					b.ToTable("Genres");

					b.HasData(
						new { Id = 1, Name = "Jazz" },
						new { Id = 2, Name = "Pop" },
						new { Id = 3, Name = "Rock" },
						new { Id = 4, Name = "JPop" },
						new { Id = 5, Name = "Latin" },
						new { Id = 6, Name = "Country" }
					);
				});

			modelBuilder.Entity("ConcertHub.Core.Domain.Gig", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<string>("ArtistId")
						.IsRequired();

					b.Property<DateTime>("DateTime");

					b.Property<int>("GenreId");

					b.Property<bool>("IsCanceled");

					b.Property<string>("Venue")
						.IsRequired()
						.HasMaxLength(255);

					b.HasKey("Id");

					b.HasIndex("ArtistId");

					b.HasIndex("GenreId");

					b.ToTable("Gigs");
				});

			modelBuilder.Entity("ConcertHub.Core.Domain.Notification", b =>
				{
					b.Property<int>("Id")
						.ValueGeneratedOnAdd()
						.HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

					b.Property<DateTime>("DateTime");

					b.Property<int?>("GigId");

					b.Property<DateTime?>("OriginalDateTime");

					b.Property<string>("OriginalVenue");

					b.Property<int>("Type");

					b.HasKey("Id");

					b.HasIndex("GigId");

					b.ToTable("Notifications");
				});

			modelBuilder.Entity("ConcertHub.Core.Domain.User", b =>
				{
					b.Property<string>("Id")
						.ValueGeneratedOnAdd();

					b.Property<string>("Name")
						.IsRequired();

					b.HasKey("Id");

					b.ToTable("Users");
				});

			modelBuilder.Entity("ConcertHub.Core.Domain.UserNotification", b =>
				{
					b.Property<string>("UserId");

					b.Property<int>("NotificationId");

					b.Property<bool>("IsRead");

					b.HasKey("UserId", "NotificationId");

					b.HasIndex("NotificationId");

					b.ToTable("UserNotifications");
				});

			modelBuilder.Entity("ConcertHub.Core.Domain.Attendance", b =>
				{
					b.HasOne("ConcertHub.Core.Domain.User", "Attendee")
						.WithMany()
						.HasForeignKey("AttendeeId")
						.OnDelete(DeleteBehavior.Cascade);

					b.HasOne("ConcertHub.Core.Domain.Gig", "Gig")
						.WithMany("Attendances")
						.HasForeignKey("GigId")
						.OnDelete(DeleteBehavior.Restrict);
				});

			modelBuilder.Entity("ConcertHub.Core.Domain.Following", b =>
				{
					b.HasOne("ConcertHub.Core.Domain.User", "Followee")
						.WithMany("Followers")
						.HasForeignKey("FolloweeId")
						.OnDelete(DeleteBehavior.Restrict);

					b.HasOne("ConcertHub.Core.Domain.User", "Follower")
						.WithMany("Followees")
						.HasForeignKey("FollowerId")
						.OnDelete(DeleteBehavior.Restrict);
				});

			modelBuilder.Entity("ConcertHub.Core.Domain.Gig", b =>
				{
					b.HasOne("ConcertHub.Core.Domain.User", "Artist")
						.WithMany()
						.HasForeignKey("ArtistId")
						.OnDelete(DeleteBehavior.Cascade);

					b.HasOne("ConcertHub.Core.Domain.Genre", "Genre")
						.WithMany()
						.HasForeignKey("GenreId")
						.OnDelete(DeleteBehavior.Cascade);
				});

			modelBuilder.Entity("ConcertHub.Core.Domain.Notification", b =>
				{
					b.HasOne("ConcertHub.Core.Domain.Gig", "Gig")
						.WithMany()
						.HasForeignKey("GigId");
				});

			modelBuilder.Entity("ConcertHub.Core.Domain.UserNotification", b =>
				{
					b.HasOne("ConcertHub.Core.Domain.Notification", "Notification")
						.WithMany()
						.HasForeignKey("NotificationId")
						.OnDelete(DeleteBehavior.Cascade);

					b.HasOne("ConcertHub.Core.Domain.User", "User")
						.WithMany("UserNotifications")
						.HasForeignKey("UserId")
						.OnDelete(DeleteBehavior.Restrict);
				});
#pragma warning restore 612, 618
		}
	}
}
